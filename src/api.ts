// my-chase-frontend/src/api.ts

// üîπ –û–¥–Ω–æ—Ä–∞–∑–æ–≤–µ "–ø—Ä–æ–±—É–¥–∂–µ–Ω–Ω—è" –±–µ–∫–µ–Ω–¥—É (Render Free –º–æ–∂–µ —Å–ø–∞—Ç–∏)
// –£ —Ç–µ—Å—Ç–∞—Ö (NODE_ENV=test) ‚Äî no-op, —â–æ–± –Ω–µ –±—É–ª–æ –º–µ—Ä–µ–∂–µ–≤–∏—Ö –≤–∏–∫–ª–∏–∫—ñ–≤.
let __warmupPromise: Promise<void> | null = null;

export async function ensureBackendAwake(): Promise<void> {
  const maybeProcess = (globalThis as any).process;
  if (maybeProcess?.env?.NODE_ENV === 'test') return; // —É jest –Ω–µ –ø—ñ–Ω–≥—É—î–º–æ

  if (__warmupPromise) return __warmupPromise;

  __warmupPromise = (async () => {
    try {
      const ctrl = new AbortController();
      const t = setTimeout(() => ctrl.abort(), 15_000); // —Ç–∞–π–º–∞—É—Ç 15—Å –Ω–∞ —Ö–æ–ª–æ–¥–Ω–∏–π —Å—Ç–∞—Ä—Ç
      await fetch('/api/health', {
        signal: ctrl.signal,
        cache: 'no-store',                // –Ω–µ –±—Ä–∞—Ç–∏ –∑ –∫–µ—à—É
        headers: { 'cache-control': 'no-cache' },
      });
      clearTimeout(t);
    } catch {
      // —è–∫—â–æ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–≤ ‚Äî —ñ–≥–Ω–æ—Ä—É—î–º–æ, –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ä–µ–∞–ª—å–Ω–∏–π –∑–∞–ø–∏—Ç –≤—Å–µ –æ–¥–Ω–æ –ø—ñ–¥–µ
    } finally {
      __warmupPromise = null; // –¥–æ–∑–≤–æ–ª—è—î–º–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏ –ø—Ä–∏ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É –∫–ª—ñ–∫—É —á–µ—Ä–µ–∑ —è–∫–∏–π—Å—å —á–∞—Å
    }
  })();

  return __warmupPromise;
}

export type Id = string;

export async function apiCreateGame(): Promise<{id: Id; state: any; version: number; players:{red:boolean;blue:boolean}}> {
  const r = await fetch('/api/games', { method: 'POST' });
  if (!r.ok) throw new Error('createGame failed');
  return r.json();
}

export async function apiJoinGame(id: Id, slot?: 'red'|'blue'): Promise<{ok: true; id: Id; slot:'red'|'blue'; token: string; state:any; version:number}> {
  const r = await fetch(`/api/games/${id}/join${slot ? `?slot=${slot}` : ''}`, { method: 'POST' });
  if (!r.ok) throw new Error('join failed');
  return r.json();
}

export async function apiAction(
  id: Id,
  token: string,
  version: number,
  action:
    | { type:'move'; from:{row:number;col:number}; to:{row:number;col:number} }
    | { type:'transfer'; src:{row:number;col:number}; dst:{row:number;col:number}; direction:'out'|'in'; amount:number }
    | { type:'absorb.choose'; row:number; col:number }
    | { type:'absorb.auto' }
    | { type:'absorb.finalize' }
    | { type:'absorb.reset' }
) {
  const r = await fetch(`/api/games/${id}/action`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'x-player-token': token
    },
    body: JSON.stringify({ version, action })
  });
  const data = await r.json();
  return { status: r.status, data };
}

export function apiSubscribe(id: Id, onMsg: (m: {type:string; payload:any}) => void) {
  const es = new EventSource(`/api/games/${id}/stream`);
  es.onmessage = (e) => {
    try { onMsg(JSON.parse(e.data)); } catch {}
  };
  return () => es.close();
}
